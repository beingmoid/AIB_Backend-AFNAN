using AIB.Common;
using AIB.Data.DTOs;
using AIB.Data.Entities;
using AIB.Services.Core;
using AutoMapper;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text;


namespace AIB.Services.Mapper
{
    public class AutoMapperMappings : Profile
    {
        public AutoMapperMappings()
        {
			this.CreateMap<BankAccount>();
			this.CreateMap<Company>();
			this.CreateMap<Invoice>();
			this.CreateMap<MotorType>();
			this.CreateMap<Outstandings>();
			this.CreateMap<Sales>();
			this.CreateMap<Transaction>();
			this.CreateMap<VehicleModel>();
			this.CreateMap<TeamMemberDTO, ExtendedUser>();
			this.CreateMap<Agent>();
			this.CreateMap<Broker>();
			this.CreateMap<Expense>();
			this.CreateMap<Branch>();
			this.CreateMap<ExtendedBranch>();
			this.CreateMap<Branch,ExtendedBranch>().ReverseMap();

        }
    }


	public static class ExtensionMethods
	{
		public static IMappingExpression<TEntity, TEntity> CreateMap<TEntity>(this Profile profile)
			where TEntity : IBaseEntity
		{
			var map = profile.CreateMap<TEntity, TEntity>()
				//.ForMember(o => o.TenantId, o => o.Ignore())
				.ForMember(o => o.CreateTime, o => o.Ignore())
				.ForMember(o => o.CreateUserId, o => o.Ignore())
				.ForMember(o => o.EditTime, o => o.Ignore())
				.ForMember(o => o.EditUserId, o => o.Ignore())
				.ForMember(o => o.IsDeleted, o => o.Ignore())
				.ForMember(o => o.IsNew, o => o.Ignore())
				.ForMember(o => o.Timestamp, o => o.Ignore());

			var isIdAutoGenerated = (Attribute.GetCustomAttribute(typeof(TEntity).GetProperty("Id"), typeof(DatabaseGeneratedAttribute)) as DatabaseGeneratedAttribute)?
				.DatabaseGeneratedOption != DatabaseGeneratedOption.None;

			if (isIdAutoGenerated)
			{
				map.ForMember("Id", o => o.Ignore());
			}

			return map;
		}
	}
}
